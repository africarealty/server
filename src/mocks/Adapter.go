// Code generated by mockery 2.9.0. DO NOT EDIT.

package mocks

import (
	context "context"

	auth "github.com/africarealty/server/src/kit/auth"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Adapter is an autogenerated mock type for the Adapter type
type Adapter struct {
	mock.Mock
}

// Close provides a mock function with given fields: ctx
func (_m *Adapter) Close(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateSession provides a mock function with given fields: ctx, session
func (_m *Adapter) CreateSession(ctx context.Context, session *auth.Session) error {
	ret := _m.Called(ctx, session)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *auth.Session) error); ok {
		r0 = rf(ctx, session)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUser provides a mock function with given fields: ctx, u
func (_m *Adapter) CreateUser(ctx context.Context, u *auth.User) error {
	ret := _m.Called(ctx, u)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *auth.User) error); ok {
		r0 = rf(ctx, u)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUser provides a mock function with given fields: ctx, u
func (_m *Adapter) DeleteUser(ctx context.Context, u *auth.User) error {
	ret := _m.Called(ctx, u)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *auth.User) error); ok {
		r0 = rf(ctx, u)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, sid
func (_m *Adapter) Get(ctx context.Context, sid string) (*auth.Session, error) {
	ret := _m.Called(ctx, sid)

	var r0 *auth.Session
	if rf, ok := ret.Get(0).(func(context.Context, string) *auth.Session); ok {
		r0 = rf(ctx, sid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.Session)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, sid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUser provides a mock function with given fields: ctx, uid
func (_m *Adapter) GetByUser(ctx context.Context, uid string) ([]*auth.Session, error) {
	ret := _m.Called(ctx, uid)

	var r0 []*auth.Session
	if rf, ok := ret.Get(0).(func(context.Context, string) []*auth.Session); ok {
		r0 = rf(ctx, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*auth.Session)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUsername provides a mock function with given fields: ctx, email
func (_m *Adapter) GetByUsername(ctx context.Context, email string) (*auth.User, error) {
	ret := _m.Called(ctx, email)

	var r0 *auth.User
	if rf, ok := ret.Get(0).(func(context.Context, string) *auth.User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: ctx, userId
func (_m *Adapter) GetUser(ctx context.Context, userId string) (*auth.User, error) {
	ret := _m.Called(ctx, userId)

	var r0 *auth.User
	if rf, ok := ret.Get(0).(func(context.Context, string) *auth.User); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByIds provides a mock function with given fields: ctx, userIds
func (_m *Adapter) GetUserByIds(ctx context.Context, userIds []string) ([]*auth.User, error) {
	ret := _m.Called(ctx, userIds)

	var r0 []*auth.User
	if rf, ok := ret.Get(0).(func(context.Context, []string) []*auth.User); ok {
		r0 = rf(ctx, userIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*auth.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, userIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Init provides a mock function with given fields: ctx, cfg
func (_m *Adapter) Init(ctx context.Context, cfg interface{}) error {
	ret := _m.Called(ctx, cfg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) error); ok {
		r0 = rf(ctx, cfg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Logout provides a mock function with given fields: ctx, sid, logoutAt
func (_m *Adapter) Logout(ctx context.Context, sid string, logoutAt time.Time) error {
	ret := _m.Called(ctx, sid, logoutAt)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) error); ok {
		r0 = rf(ctx, sid, logoutAt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateLastActivity provides a mock function with given fields: ctx, sid, lastActivity
func (_m *Adapter) UpdateLastActivity(ctx context.Context, sid string, lastActivity time.Time) error {
	ret := _m.Called(ctx, sid, lastActivity)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) error); ok {
		r0 = rf(ctx, sid, lastActivity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUser provides a mock function with given fields: ctx, u
func (_m *Adapter) UpdateUser(ctx context.Context, u *auth.User) error {
	ret := _m.Called(ctx, u)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *auth.User) error); ok {
		r0 = rf(ctx, u)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
