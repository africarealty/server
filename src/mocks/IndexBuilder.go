// Code generated by mockery 2.14.0. DO NOT EDIT.

package mocks

import (
	es "github.com/africarealty/server/src/kit/storages/es"
	mock "github.com/stretchr/testify/mock"
)

// IndexBuilder is an autogenerated mock type for the IndexBuilder type
type IndexBuilder struct {
	mock.Mock
}

// Build provides a mock function with given fields:
func (_m *IndexBuilder) Build() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WithAlias provides a mock function with given fields: name
func (_m *IndexBuilder) WithAlias(name string) es.IndexBuilder {
	ret := _m.Called(name)

	var r0 es.IndexBuilder
	if rf, ok := ret.Get(0).(func(string) es.IndexBuilder); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(es.IndexBuilder)
		}
	}

	return r0
}

// WithExplicitMapping provides a mock function with given fields: mapping
func (_m *IndexBuilder) WithExplicitMapping(mapping string) es.IndexBuilder {
	ret := _m.Called(mapping)

	var r0 es.IndexBuilder
	if rf, ok := ret.Get(0).(func(string) es.IndexBuilder); ok {
		r0 = rf(mapping)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(es.IndexBuilder)
		}
	}

	return r0
}

// WithIndex provides a mock function with given fields: name
func (_m *IndexBuilder) WithIndex(name string) es.IndexBuilder {
	ret := _m.Called(name)

	var r0 es.IndexBuilder
	if rf, ok := ret.Get(0).(func(string) es.IndexBuilder); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(es.IndexBuilder)
		}
	}

	return r0
}

// WithMappingModel provides a mock function with given fields: model
func (_m *IndexBuilder) WithMappingModel(model interface{}) es.IndexBuilder {
	ret := _m.Called(model)

	var r0 es.IndexBuilder
	if rf, ok := ret.Get(0).(func(interface{}) es.IndexBuilder); ok {
		r0 = rf(model)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(es.IndexBuilder)
		}
	}

	return r0
}

type mockConstructorTestingTNewIndexBuilder interface {
	mock.TestingT
	Cleanup(func())
}

// NewIndexBuilder creates a new instance of IndexBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIndexBuilder(t mockConstructorTestingTNewIndexBuilder) *IndexBuilder {
	mock := &IndexBuilder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
