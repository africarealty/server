// Code generated by mockery 2.9.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/africarealty/server/src/domain"
	listener "github.com/africarealty/server/src/kit/queue/listener"

	mock "github.com/stretchr/testify/mock"

	service "github.com/africarealty/server/src/service"
)

// EmailService is an autogenerated mock type for the EmailService type
type EmailService struct {
	mock.Mock
}

// Init provides a mock function with given fields: cfg
func (_m *EmailService) Init(cfg *service.Config) error {
	ret := _m.Called(cfg)

	var r0 error
	if rf, ok := ret.Get(0).(func(*service.Config) error); ok {
		r0 = rf(cfg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RequestHandler provides a mock function with given fields:
func (_m *EmailService) RequestHandler() listener.QueueMessageHandler {
	ret := _m.Called()

	var r0 listener.QueueMessageHandler
	if rf, ok := ret.Get(0).(func() listener.QueueMessageHandler); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listener.QueueMessageHandler)
		}
	}

	return r0
}

// Send provides a mock function with given fields: ctx, rq
func (_m *EmailService) Send(ctx context.Context, rq *domain.EmailRequest) (*domain.Email, error) {
	ret := _m.Called(ctx, rq)

	var r0 *domain.Email
	if rf, ok := ret.Get(0).(func(context.Context, *domain.EmailRequest) *domain.Email); ok {
		r0 = rf(ctx, rq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Email)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.EmailRequest) error); ok {
		r1 = rf(ctx, rq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
