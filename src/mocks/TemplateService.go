// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/africarealty/server/src/domain"
	mock "github.com/stretchr/testify/mock"
)

// TemplateService is an autogenerated mock type for the TemplateService type
type TemplateService struct {
	mock.Mock
}

// CreateTemplate provides a mock function with given fields: ctx, rq
func (_m *TemplateService) CreateTemplate(ctx context.Context, rq *domain.Template) (*domain.Template, error) {
	ret := _m.Called(ctx, rq)

	var r0 *domain.Template
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Template) *domain.Template); ok {
		r0 = rf(ctx, rq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Template)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Template) error); ok {
		r1 = rf(ctx, rq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTemplate provides a mock function with given fields: ctx, id
func (_m *TemplateService) DeleteTemplate(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTemplate provides a mock function with given fields: ctx, id
func (_m *TemplateService) GetTemplate(ctx context.Context, id string) (*domain.Template, error) {
	ret := _m.Called(ctx, id)

	var r0 *domain.Template
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Template); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Template)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchTemplates provides a mock function with given fields: ctx, query
func (_m *TemplateService) SearchTemplates(ctx context.Context, query string) ([]*domain.Template, error) {
	ret := _m.Called(ctx, query)

	var r0 []*domain.Template
	if rf, ok := ret.Get(0).(func(context.Context, string) []*domain.Template); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Template)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTemplate provides a mock function with given fields: ctx, rq
func (_m *TemplateService) UpdateTemplate(ctx context.Context, rq *domain.Template) (*domain.Template, error) {
	ret := _m.Called(ctx, rq)

	var r0 *domain.Template
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Template) *domain.Template); ok {
		r0 = rf(ctx, rq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Template)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Template) error); ok {
		r1 = rf(ctx, rq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTemplateService interface {
	mock.TestingT
	Cleanup(func())
}

// NewTemplateService creates a new instance of TemplateService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTemplateService(t mockConstructorTestingTNewTemplateService) *TemplateService {
	mock := &TemplateService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
