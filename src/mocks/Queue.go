// Code generated by mockery 2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	queue "github.com/africarealty/server/src/kit/queue"
	mock "github.com/stretchr/testify/mock"
)

// Queue is an autogenerated mock type for the Queue type
type Queue struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Queue) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Declare provides a mock function with given fields: ctx, qt, topic
func (_m *Queue) Declare(ctx context.Context, qt queue.QueueType, topic string) error {
	ret := _m.Called(ctx, qt, topic)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, queue.QueueType, string) error); ok {
		r0 = rf(ctx, qt, topic)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Open provides a mock function with given fields: ctx, clientId, options
func (_m *Queue) Open(ctx context.Context, clientId string, options *queue.Config) error {
	ret := _m.Called(ctx, clientId, options)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *queue.Config) error); ok {
		r0 = rf(ctx, clientId, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Publish provides a mock function with given fields: ctx, qt, topic, msg
func (_m *Queue) Publish(ctx context.Context, qt queue.QueueType, topic string, msg *queue.Message) error {
	ret := _m.Called(ctx, qt, topic, msg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, queue.QueueType, string, *queue.Message) error); ok {
		r0 = rf(ctx, qt, topic, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetLostConnectionHandler provides a mock function with given fields: _a0
func (_m *Queue) SetLostConnectionHandler(_a0 queue.EventHandler) {
	_m.Called(_a0)
}

// SetReconnectHandler provides a mock function with given fields: _a0
func (_m *Queue) SetReconnectHandler(_a0 queue.EventHandler) {
	_m.Called(_a0)
}

// Subscribe provides a mock function with given fields: qt, topic, durableId, receiverChan
func (_m *Queue) Subscribe(qt queue.QueueType, topic string, durableId string, receiverChan chan<- []byte) error {
	ret := _m.Called(qt, topic, durableId, receiverChan)

	var r0 error
	if rf, ok := ret.Get(0).(func(queue.QueueType, string, string, chan<- []byte) error); ok {
		r0 = rf(qt, topic, durableId, receiverChan)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SubscribeLB provides a mock function with given fields: qt, topic, loadBalancingGroup, durableId, receiverChan
func (_m *Queue) SubscribeLB(qt queue.QueueType, topic string, loadBalancingGroup string, durableId string, receiverChan chan<- []byte) error {
	ret := _m.Called(qt, topic, loadBalancingGroup, durableId, receiverChan)

	var r0 error
	if rf, ok := ret.Get(0).(func(queue.QueueType, string, string, string, chan<- []byte) error); ok {
		r0 = rf(qt, topic, loadBalancingGroup, durableId, receiverChan)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewQueue interface {
	mock.TestingT
	Cleanup(func())
}

// NewQueue creates a new instance of Queue. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewQueue(t mockConstructorTestingTNewQueue) *Queue {
	mock := &Queue{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
