// Code generated by mockery 2.9.0. DO NOT EDIT.

package mocks

import (
	context "context"

	auth "github.com/africarealty/server/src/kit/auth"

	mock "github.com/stretchr/testify/mock"
)

// PasswordService is an autogenerated mock type for the PasswordService type
type PasswordService struct {
	mock.Mock
}

// CheckPolicy provides a mock function with given fields: ctx, password, policy
func (_m *PasswordService) CheckPolicy(ctx context.Context, password string, policy *auth.PasswordPolicy) (bool, error) {
	ret := _m.Called(ctx, password, policy)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, *auth.PasswordPolicy) bool); ok {
		r0 = rf(ctx, password, policy)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *auth.PasswordPolicy) error); ok {
		r1 = rf(ctx, password, policy)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHash provides a mock function with given fields: ctx, password
func (_m *PasswordService) GetHash(ctx context.Context, password string) (string, error) {
	ret := _m.Called(ctx, password)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Verify provides a mock function with given fields: ctx, password, hash
func (_m *PasswordService) Verify(ctx context.Context, password string, hash string) (bool, error) {
	ret := _m.Called(ctx, password, hash)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, password, hash)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, password, hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
