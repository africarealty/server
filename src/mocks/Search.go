// Code generated by mockery 2.14.0. DO NOT EDIT.

package mocks

import (
	es "github.com/africarealty/server/src/kit/storages/es"
	elastic "github.com/olivere/elastic/v7"
	mock "github.com/stretchr/testify/mock"
)

// Search is an autogenerated mock type for the Search type
type Search struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Search) Close() {
	_m.Called()
}

// Delete provides a mock function with given fields: index, id
func (_m *Search) Delete(index string, id string) error {
	ret := _m.Called(index, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(index, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteBulk provides a mock function with given fields: index, ids
func (_m *Search) DeleteBulk(index string, ids []string) error {
	ret := _m.Called(index, ids)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []string) error); ok {
		r0 = rf(index, ids)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Exists provides a mock function with given fields: index, id
func (_m *Search) Exists(index string, id string) (bool, error) {
	ret := _m.Called(index, id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(index, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(index, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClient provides a mock function with given fields:
func (_m *Search) GetClient() *elastic.Client {
	ret := _m.Called()

	var r0 *elastic.Client
	if rf, ok := ret.Get(0).(func() *elastic.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elastic.Client)
		}
	}

	return r0
}

// Index provides a mock function with given fields: index, id, data
func (_m *Search) Index(index string, id string, data interface{}) error {
	ret := _m.Called(index, id, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, interface{}) error); ok {
		r0 = rf(index, id, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IndexAsync provides a mock function with given fields: index, id, data
func (_m *Search) IndexAsync(index string, id string, data interface{}) {
	_m.Called(index, id, data)
}

// IndexBulk provides a mock function with given fields: index, docs
func (_m *Search) IndexBulk(index string, docs map[string]interface{}) error {
	ret := _m.Called(index, docs)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, map[string]interface{}) error); ok {
		r0 = rf(index, docs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IndexBulkAsync provides a mock function with given fields: index, docs
func (_m *Search) IndexBulkAsync(index string, docs map[string]interface{}) {
	_m.Called(index, docs)
}

// NewBuilder provides a mock function with given fields:
func (_m *Search) NewBuilder() es.IndexBuilder {
	ret := _m.Called()

	var r0 es.IndexBuilder
	if rf, ok := ret.Get(0).(func() es.IndexBuilder); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(es.IndexBuilder)
		}
	}

	return r0
}

// Ping provides a mock function with given fields:
func (_m *Search) Ping() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Refresh provides a mock function with given fields: index
func (_m *Search) Refresh(index string) error {
	ret := _m.Called(index)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(index)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewSearch interface {
	mock.TestingT
	Cleanup(func())
}

// NewSearch creates a new instance of Search. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSearch(t mockConstructorTestingTNewSearch) *Search {
	mock := &Search{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
