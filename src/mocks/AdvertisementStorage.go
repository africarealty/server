// Code generated by mockery 2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/africarealty/server/src/domain"
	mock "github.com/stretchr/testify/mock"
)

// AdvertisementStorage is an autogenerated mock type for the AdvertisementStorage type
type AdvertisementStorage struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, ads
func (_m *AdvertisementStorage) Create(ctx context.Context, ads *domain.Advertisement) error {
	ret := _m.Called(ctx, ads)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Advertisement) error); ok {
		r0 = rf(ctx, ads)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, adsId
func (_m *AdvertisementStorage) Delete(ctx context.Context, adsId string) error {
	ret := _m.Called(ctx, adsId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, adsId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, adsId
func (_m *AdvertisementStorage) Get(ctx context.Context, adsId string) (*domain.Advertisement, error) {
	ret := _m.Called(ctx, adsId)

	var r0 *domain.Advertisement
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Advertisement); ok {
		r0 = rf(ctx, adsId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Advertisement)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, adsId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCode provides a mock function with given fields: ctx
func (_m *AdvertisementStorage) GetCode(ctx context.Context) (string, error) {
	ret := _m.Called(ctx)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Search provides a mock function with given fields: ctx, rq
func (_m *AdvertisementStorage) Search(ctx context.Context, rq *domain.AdsSearchRequest) (*domain.AdsSearchResponse, error) {
	ret := _m.Called(ctx, rq)

	var r0 *domain.AdsSearchResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.AdsSearchRequest) *domain.AdsSearchResponse); ok {
		r0 = rf(ctx, rq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.AdsSearchResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.AdsSearchRequest) error); ok {
		r1 = rf(ctx, rq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, ads
func (_m *AdvertisementStorage) Update(ctx context.Context, ads *domain.Advertisement) error {
	ret := _m.Called(ctx, ads)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Advertisement) error); ok {
		r0 = rf(ctx, ads)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewAdvertisementStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewAdvertisementStorage creates a new instance of AdvertisementStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAdvertisementStorage(t mockConstructorTestingTNewAdvertisementStorage) *AdvertisementStorage {
	mock := &AdvertisementStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
